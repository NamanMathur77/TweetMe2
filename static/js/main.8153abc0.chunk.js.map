{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","console","log","tempNewTweets","unshift","content","like","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","likes","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8153abc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport { loadTweets } from \"../lookup\";\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef(); //through reference we can access the referenced field\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n    console.log(newVal)\n    let tempNewTweets = [...newTweets] //copying the newTweets state declared earlier\n    tempNewTweets.unshift({//unshift moves the element to add in the stating whereas push put it in the end\n      content: newVal,\n      like: 0,\n      id: 1234\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = \"\";\n  };\n\n  return (\n    <div className={props.className}>\n      <div className=\"col-12 mb-3\">\n        <form onSubmit={handleSubmit}>\n          <textarea\n            ref={textAreaRef}\n            className=\"form-control\"\n            required={true}\n            name=\"tweet\"\n          ></textarea>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Tweet\n          </button>\n        </form>\n      </div>\n      <TweetsList newTweets={newTweets}/>\n    </div>\n  );\n}\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([])\n  // setTweetsInit([...props.newTweets].concat(tweetsInit))\n  useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n    }\n  }, [props.newTweets, tweets, tweetsInit])\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response);\n      } else {\n        alert(\"There was an error\")\n      }\n    };\n    loadTweets(myCallback);\n  }, [tweetsInit]);\n\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-{item.id}`}\n      />\n    );\n  });\n}\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n  const [userLike, setUserLike] = useState(\n    tweet.userLike === true ? true : false\n  );\n  const className = props.className ? props.className : \"btn btn-primary\";\n  const actionDisplay = action.display ? action.display : \"Action\";\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (action.type === \"like\") {\n      if (userLike === true) {\n        //unklike it\n        setLikes(likes - 1);\n        setUserLike(false);\n      } else {\n        setLikes(likes + 1);\n        setUserLike(true);\n      }\n    }\n  };\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n\n  return (\n    <button className={className} onClick={handleClick}>\n      {\" \"}\n      {display}{\" \"}\n    </button>\n  );\n}\n\nexport function Tweet(props) {\n  const { tweet } = props;\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n  return (\n    <div className={className}>\n      <p>\n        {tweet.id} - {tweet.content}\n      </p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"like\" }} />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"unlike\", display: \"unlike\" }}\n        />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"retweet\", display: \"retweet\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function(){\n      callback(xhr.response, xhr.status)\n  \n    }\n    xhr.send()\n  }","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n// function loadTweets(callback) {\n//   const xhr = new XMLHttpRequest()\n//   const method = 'GET'\n//   const url = \"http://localhost:8000/api/tweets/\"\n//   const responseType = \"json\"\n//   xhr.responseType = responseType\n//   xhr.open(method, url)\n//   xhr.onload = function(){\n//     callback(xhr.response, xhr.status)\n\n//   }\n//   xhr.send()\n// }\n\n// function ActionBtn(props){\n//   const {tweet, action} = props\n//   const className = props.className ? props.className : 'btn btn-primary'\n//   return action.type === 'like' ? <button className={className}> {tweet.likes} Likes</button> : null \n// }\n\n// function Tweet(props){\n//   const {tweet} = props\n//   const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n//   return <div className={className}>\n//     <p>{tweet.id} - {tweet.content}</p>\n//     <div className='btn btn-group'>\n//     <ActionBtn tweet={tweet} action={{type: \"like\"}} />\n//     <ActionBtn tweet={tweet} action={{type: \"unlike\"}} />\n//     </div>\n//   </div>\n// }\n\n// function TweetsList(props){\n//   const [tweets, setTweets] = useState([])\n\n//   useEffect(()=>{\n//     const myCallback = (response, status) => {\n//       if (status === 200){\n//         setTweets(response)\n//       }\n//     }\n//     loadTweets(myCallback)\n//   })\n\n//   return tweets.map((item, index)=>{\n//     return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n//   })\n\n\n// }\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets';\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(\n    <App />, appEl\n  );\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(<TweetsComponent/>, tweetsEl);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}